#!/bin/bash
# Please note that for the correct operation you
# will need the utilities found here
#
#
#
#Static Variables
DIR=                        #Directory for backups, for example /home/user/backups/
                            #Do not use system directories, create a new!
#
DATE=$(echo `date +%Y.%m.%d`)       #Date
exec 2>> $DIR$DATE".log"            #Need for log
#
#
#Individual variables
IP=                         #Mikrotik IP
LGIN=                       #Mikrotik login (user)
PASS=                       #Password (SSH)
NAME=                       #Name router (example "LasVegasRouter")
PRT=                        #Port (can 1 for all)
#
# Verification. I do not recommend ICMP,
# but you can comment on the unnecessary, use #
#status=$(ping -c 1 $IP &> /dev/null && echo success || echo fail)
status=$(netcat -w3 -z $IP $PRT && echo success || echo fail)
#
#
#
#Other Variables
#SHELF=                     #Shelf life, needed to remove old backups (in days)
gg=success                  #Variable to check (netcat or ICMP check)
#
#
#
# Echo is necessary for visualizing and recording errors.
# If verification passes, a backup will be created on the router,
# then saved locally,
# after which the backup will be deleted from the router.
# If not, an error will be displayed, excluding utility errors.
#
function router {
echo "
  Start $IP ($NAME)...
  "
if [ $status = $gg ]
then
  echo "_______________________________
  Status $IP - OK, create backup:"
  sshpass -p $PASS ssh -T -p $PRT $LGIN@$IP << EOF
export file=$IP$NAME
system backup save name=$IP$NAME
quit
EOF
echo "
  Lockal save backup's...
  "
sshpass -p $PASS scp -P $PRT $LGIN@$IP":/$IP$NAME.rsc" $DIR
sshpass -p $PASS scp -P $PRT $LGIN@$IP":/$IP$NAME.backup" $DIR
echo "
  Cleaning router directory...
  "
sshpass -p $PASS ssh -T -p $PRT $LGIN@$IP << EOF
file remove "$IP$NAME.rsc"
file remove "$IP$NAME.backup"
quit
EOF
echo "
$IP END
  _______________________________
"
else
  echo "  ...............................
  ERROR $IP,
  backup can't create and save.
  Check the specified port and ip
  ...............................
  _______________________________
  "
fi
}
#nextrouterdata
#nextrouterfunc
#
function startsaver{
  router
  #nextrouterfunc-name
}
#
#
#
startsaver >> $DIR$DATE.log               #Start save backup's
#
#
#
# Logging, archiving and version control
#
# If an error occurred while creating or copying, including when
# utilities were working, the archive will be marked as broken,
# and you will see an error in the log
statsave=$(cat $DIR$DATE.log | grep "ERROR \| failed \| denied" && echo ERROR || echo success )
#
function archandel {
echo "

  _______________________________
  Archiving of collected backup's started:"
if [ "$statsave" = "$gg" ]
  then
    zip -9 -j $DIR$DATE.zip $DIR*.backup $DIR*rsc
    rm $DIR*.backup $DIR*.rsc
#    echo "
#    search and delete old versions"
#    find "$DIR"2* -mtime +$SHELF -delete
    echo "
  Archiving done
  _______________________________"
  else
    echo "  ...............................
                ERROR
    not all backups are received
        сheck the correctness
         of the entered data
          and read the log!
  ..............................."
    zip -9 -j $DIR$DATE"_brocken".zip $DIR*.backup $DIR*rsc
    rm $DIR*.backup $DIR*.rsc
    echo "  _______________________________"
fi
}
#
archandel >> $DIR$DATE.log    #Archiving of collected backup's started
                              #Search and delete old versions opt.
#
#
#
# I suggest using the Telegram bot for alerts.
# It is convenient and quite simple. You can learn about how to find
# out the chat ID and bot token from the many tutorials on the network,
# I will not describe it.                           Attention!
# If this messenger is blocked in your country, you will have to use VPN
#Variables for alerts
TOKEN =                       #Bot token
IDPM =                        #ID chat where only you and the bot
#IDCHAT =                     #If you have a group chat - its ID
URL = "https://api.telegram.org/bot$TOKEN/sendMessage"
GOODMSSGE = "Backup creation was successful"          #Good news
BADMSSGE = "Houston, we have a problem. Check logs"   #Bad news
#
function alert {
  echo "  _______________________________
  Alerts are generated"
if [ "$statsave" = "gg" ]
  then
#    curl -s -X POST $URL -d chat_id=$IDCHAT -d text="$GOODMSSGE"
    curl -s -X POST $URL -d chat_id=$IDPM -d text="$GOODMSSGE"
    echo "END
    _______________________________"
  else
    curl -s -X POST $URL -d chat_id=$IDPM -d text="$BADMSSGE"
#    curl -s -X POST $URL -d chat_id=$IDCHAT -d text="$BADMSSGE"
    echo "END
    _______________________________"
fi
}
